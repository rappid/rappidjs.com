{
    "methods": [
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "name": "_beforeDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_bindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false,
                    "description": "the function to call"
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": false,
                    "description": "delay in ms"
                }
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_callFunctionDelayed",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "attribute",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "key",
                    "optional": false
                }
            ],
            "description": "Returns a copy of the attribute. This method is a hook for further cloning options",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_cloneAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": false,
                    "description": "contains the changed attributes"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "the options passed in the set method"
                }
            ],
            "description": "called after attributes has set and some of the has been changed",
            "abstract": "",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_commitChangedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_commitInvalidatedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "returns the default attributes and includes the defaults from base classes"
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_defaultAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "name": "_destroyCompleted",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_extract",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "property",
                    "optional": false,
                    "description": "the name of the static property used to find defaults"
                }
            ],
            "description": "generates a default chain containing the values from this instance and base classes",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_generateDefaultsChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasAll",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasSome",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initializationComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Initialize all Binding and Event attributes",
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindings",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindingsBeforeComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initializeFromCtor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_inject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_injectChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "overwritesMethod": true,
            "name": "_innerDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Event"
                    ],
                    "name": "e",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "item",
                    "optional": false
                }
            ],
            "description": "",
            "private": "",
            "name": "_onItemChange",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "e"
                },
                {
                    "name": "item"
                }
            ],
            "name": "_onItemEvent",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_postConstruct",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_preDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_setUp",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_tearDown",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_unbindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Array",
                        "Object"
                    ],
                    "name": "items",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "description": "This method adds one ore items to the array.",
            "name": "add",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "eventType",
                    "types": [
                        "String"
                    ],
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "optional": false,
                    "description": "the event handler function"
                },
                {
                    "name": "scope",
                    "types": [
                        "Object"
                    ],
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "definedBy": "js.core.EventDispatcher",
            "overwritesMethod": true,
            "name": "bind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "description": "Clears all items and triggers reset event",
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "clear",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Returns a fresh copy of the List",
            "returns": {
                "types": [
                    "List"
                ],
                "description": "a fresh copy of the list"
            },
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "clone",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Array"
                    ],
                    "name": "items",
                    "optional": false,
                    "description": "to add"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "attributes to set"
                }
            ],
            "description": "List constructor",
            "definedBy": "js.core.Base",
            "overwritesMethod": true,
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Clears up the instance",
            "definedBy": "js.core.EventDispatcher",
            "name": "destroy",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false,
                    "description": "callback with signature function(item, index)"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": false,
                    "description": "The call scope of the callback"
                }
            ],
            "description": "Iterates over all items with given callback",
            "name": "each",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "defaultValue": "this",
                    "description": "the scope where the path is evaluated"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "or path"
                }
            ],
            "description": "evaluates a path to retrieve a value",
            "returns": {
                "types": null,
                "description": "the value for the path or undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "get",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "fncName"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForFncName",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForKey",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "optional": false,
                    "description": "to get the value"
                }
            ],
            "description": "determinate if a attribute is available",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if attribute is not undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "has",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "item",
                    "optional": false
                }
            ],
            "description": "Returns the index of the item",
            "returns": {
                "types": [
                    "Number"
                ],
                "description": "index"
            },
            "name": "indexOf",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "initialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.core.List"
                    ],
                    "name": "list",
                    "optional": false
                }
            ],
            "description": "Checks if items are deep equal",
            "returns": {
                "types": [
                    "boolean"
                ]
            },
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "isDeepEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "isEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "description": "logs messages to configured logging functions",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Removes last item  of the list",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "pop",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "item",
                    "optional": false
                }
            ],
            "description": "Pushes one item to the list",
            "name": "push",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object",
                        "Array"
                    ],
                    "name": "items",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "description": "Removes an Array or just one item from the list. Triggers remove events.",
            "name": "remove",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Number"
                    ],
                    "name": "index",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "description": "Removes one item a specific index and triggers remove event",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "removed item"
            },
            "name": "removeAt",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Array"
                    ],
                    "name": "items",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "description": "Resets the list with the given items and triggers reset event",
            "name": "reset",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "determinate if the application runs in the browser or on node",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "The attribute key"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "value",
                    "optional": false,
                    "description": "The attribute value"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "A hash of options"
                }
            ],
            "description": "Sets new values for attributes and notify about changes",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "this"
            },
            "definedBy": "js.core.Bindable",
            "name": "set",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "value"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "setLater",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Removes first item of list",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "shift",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false
                }
            ],
            "description": "Sorts the list by the given function and triggers sort event",
            "name": "sort",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Syncs the items back to the source",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "sync",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "transformFnc",
                    "optional": false
                }
            ],
            "description": "Transforms List to an arrayYou can specify a transform fnc",
            "returns": {
                "types": [
                    "Array"
                ]
            },
            "name": "toArray",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "EventDispatcher.Event",
                        "Object"
                    ],
                    "name": "event",
                    "optional": false,
                    "description": "If you use an Object the object is wrapped in an Event"
                },
                {
                    "types": null,
                    "name": "target",
                    "optional": false
                }
            ],
            "description": "Triggers a specific event and the * event",
            "definedBy": "js.core.EventDispatcher",
            "name": "trigger",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "eventType",
                    "types": [
                        "String"
                    ],
                    "optional": false
                },
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "optional": false,
                    "description": "the event handler which is currently bound"
                },
                {
                    "name": "scope",
                    "types": [
                        "Object"
                    ],
                    "optional": true
                }
            ],
            "definedBy": "js.core.EventDispatcher",
            "overwritesMethod": true,
            "name": "unbind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Object"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "the attribute or attributes to unset"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "description": "Unset attribute on $",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "unset",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "item",
                    "optional": false
                }
            ],
            "description": "Adds item to first position of list",
            "name": "unshift",
            "visibility": "public"
        }
    ],
    "defaults": {},
    "properties": {
        "isEmpty": {
            "name": "isEmpty",
            "visibility": "public",
            "propertyType": "complex",
            "value": " function () {\n            return this.$items.length === 0;\n        }.on('*')",
            "description": ""
        },
        "size": {
            "name": "size",
            "visibility": "public",
            "propertyType": "complex",
            "value": " function () {\n            return this.$items.length;\n        }.on('*')",
            "description": "Returns the size of the list"
        },
        "at": {
            "name": "at",
            "visibility": "public",
            "propertyType": "complex",
            "value": " function (index) {\n            if (index < this.$items.length && index >= 0) {\n                return this.$items[index];\n            }\n            return null;\n        }.on('*')",
            "description": "Returns item at a specific index"
        },
        "includes": {
            "name": "includes",
            "visibility": "public",
            "propertyType": "complex",
            "value": " function (item) {\n            var ret = this.each(function (innerItem) {\n                if (innerItem === item) {\n                    this[\"return\"](true);\n                }\n            });\n            if (ret) {\n                return ret;\n            } else {\n                return false;\n            }\n        }.on('*')",
            "description": "Checks if item is included in List"
        },
        "inject": {
            "name": "inject",
            "visibility": "public",
            "propertyType": "complex",
            "value": " {}",
            "description": "values to be injected",
            "definedBy": "js.core.Bindable"
        }
    },
    "fqClassName": "js.core.List",
    "inherit": "js.core.Bindable",
    "dependencies": [
        "js.core.Bindable",
        "js.core.EventDispatcher",
        "underscore"
    ],
    "type": "js",
    "inheritancePath": [
        "js.core.Bindable",
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}