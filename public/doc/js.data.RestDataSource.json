{
    "methods": [
        {
            "type": "Method",
            "parameter": [],
            "description": "Returns the ENVIRONMENT object",
            "definedBy": "js.core.Component",
            "name": "ENV",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "config"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_addConfiguration",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "template"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_addTemplate",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "model"
                },
                {
                    "name": "options"
                },
                {
                    "name": "callback"
                }
            ],
            "definedBy": "js.data.DataSource",
            "name": "_afterModelSave",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "name": "_beforeDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "model"
                },
                {
                    "name": "options"
                },
                {
                    "name": "callback"
                }
            ],
            "definedBy": "js.data.DataSource",
            "name": "_beforeModelSave",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_bindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "resource"
                },
                {
                    "name": "endPoint"
                }
            ],
            "name": "_buildUriForResource",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false,
                    "description": "the function to call"
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": false,
                    "description": "delay in ms"
                }
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_callFunctionDelayed",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "private": "This method is called after all children are initialized",
            "definedBy": "js.core.Component",
            "name": "_childrenInitialized",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "desc"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_cleanUpDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "attribute",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "key",
                    "optional": false
                }
            ],
            "description": "Returns a copy of the attribute. This method is a hook for further cloning options",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_cloneAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": false,
                    "description": "contains the changed attributes"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "the options passed in the set method"
                }
            ],
            "description": "called after attributes has set and some of the has been changed",
            "abstract": "",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_commitChangedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_commitInvalidatedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "DOM"
                    ],
                    "name": "node",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "attributes",
                    "optional": true,
                    "description": "for new Component"
                },
                {
                    "name": "rootScope"
                }
            ],
            "description": "Create {@link Component} for DOM Node with given attributes",
            "definedBy": "js.core.Component",
            "name": "_createComponentForNode",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "sortParmeters"
                }
            ],
            "name": "_createSortParameter",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "node"
                },
                {
                    "name": "rootScope"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_createTextElement",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "returns the default attributes and includes the defaults from base classes"
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_defaultAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "name": "_destroyCompleted",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_extract",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "property",
                    "optional": false,
                    "description": "the name of the static property used to find defaults"
                }
            ],
            "description": "generates a default chain containing the values from this instance and base classes",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_generateDefaultsChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "descriptor"
                },
                {
                    "name": "rootScope"
                }
            ],
            "definedBy": "js.core.Element",
            "name": "_getAttributesFromDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "descriptor",
                    "optional": false
                },
                {
                    "name": "rootScope"
                }
            ],
            "description": "Converts all child nodes of a descriptor to instances of Components or TextElement",
            "definedBy": "js.core.Component",
            "name": "_getChildrenFromDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "factory"
                },
                {
                    "name": "parent"
                },
                {
                    "name": "data"
                }
            ],
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "_getContext",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "eventDefinition"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_getEventName",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "eventName"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_getEventTypeForAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "method"
                }
            ],
            "name": "_getHttpMethod",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "node"
                }
            ],
            "definedBy": "js.core.Element",
            "name": "_getLocalNameFromNode",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "collectionPage"
                }
            ],
            "name": "_getPagingParameterForCollectionPage",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "desc"
                }
            ],
            "definedBy": "js.core.Element",
            "name": "_getTextContentFromDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasAll",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasSome",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initializationComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                }
            ],
            "definedBy": "js.core.Element",
            "name": "_initializeAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Initialize all Binding and Event attributes",
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindings",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindingsBeforeComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "childComponents"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_initializeChildren",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Element",
            "name": "_initializeDescriptors",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attribute"
                }
            ],
            "definedBy": "js.core.Element",
            "name": "_initializeEventAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_initializeFromCtor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "rootScope"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_initializeXamlEventAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_inject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_injectChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "name": "_innerDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "event",
                    "optional": false
                }
            ],
            "description": "Returns true if event is defined in Component event list",
            "definedBy": "js.core.Component",
            "name": "_isComponentEvent",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributeName"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_isEventAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributeName"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_isFunctionAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributeName"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "_isXamlEventAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "domNode",
                    "optional": false
                }
            ],
            "description": "IE8 FIXES",
            "definedBy": "js.core.Component",
            "name": "_localNameFromDomNode",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "xhr"
                },
                {
                    "name": "model"
                },
                {
                    "name": "options"
                }
            ],
            "name": "_parseModelPayload",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_postConstruct",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_preDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Element",
            "name": "_preinitialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "resourcePath"
                },
                {
                    "name": "resource"
                }
            ],
            "name": "_resourcePathToUri",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "model"
                },
                {
                    "name": "options"
                },
                {
                    "name": "callback"
                }
            ],
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "_saveModel",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_setUp",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_tearDown",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "queryObject"
                }
            ],
            "definedBy": "js.data.DataSource",
            "name": "_translateQueryObject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "name": "_unbindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "_validateConfiguration",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.core.Element"
                    ],
                    "name": "child",
                    "optional": false
                },
                {
                    "name": "options"
                }
            ],
            "description": "adds a children",
            "definedBy": "js.core.Component",
            "name": "addChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "path"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "baseUrl",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "description": "Binds a callback and a scope to a given eventType",
            "definedBy": "js.core.EventDispatcher",
            "name": "bind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Component",
            "name": "bus",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Clears all attributes",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "clear",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "options"
                }
            ],
            "description": "This method returns a copy of the Object",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "a fresh copy of the Bindable"
            },
            "definedBy": "js.core.Bindable",
            "name": "clone",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "model"
                },
                {
                    "name": "options"
                }
            ],
            "definedBy": "js.data.DataSource",
            "name": "composeModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "collection"
                },
                {
                    "name": "options"
                },
                {
                    "name": "callback"
                }
            ],
            "definedBy": "js.data.DataSource",
            "name": "countCollection",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "path"
                },
                {
                    "name": "callback"
                },
                {
                    "name": "callbackScope"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "createBinding",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Component",
            "name": "createChildren",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "factory",
                    "optional": false,
                    "description": "The factory"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                },
                {
                    "types": [
                        "js.data.DataSource.Context"
                    ],
                    "name": "context",
                    "optional": true
                }
            ],
            "description": "Creates a collection by a given factory in a caching context",
            "returns": {
                "types": [
                    "js.data.Collection"
                ]
            },
            "definedBy": "js.data.DataSource",
            "name": "createCollection",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "factory",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": true
                },
                {
                    "types": null,
                    "name": "descriptor",
                    "optional": true,
                    "defaultValue": "false"
                }
            ],
            "description": "",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.core.Component",
            "name": "createComponent",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "contextModel"
                },
                {
                    "types": null,
                    "name": "properties",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "parentContext",
                    "optional": false
                }
            ],
            "description": "creates the context as RestContext",
            "returns": {
                "types": [
                    "js.core.RestDataSource.RestContext"
                ]
            },
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "createContext",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "factory",
                    "optional": false
                },
                {
                    "types": [
                        "String",
                        "Number"
                    ],
                    "name": "id",
                    "optional": true
                },
                {
                    "types": [
                        "js.data.DataSource.Context"
                    ],
                    "name": "context",
                    "optional": true
                }
            ],
            "description": "Create an instance of {js.data.Entity}",
            "returns": {
                "types": [
                    "js.data.Entity"
                ]
            },
            "definedBy": "js.data.DataSource",
            "name": "createEntity",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Base",
            "overwritesMethod": true,
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Clears up the instance",
            "definedBy": "js.core.EventDispatcher",
            "name": "destroy",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "location"
                },
                {
                    "name": "request"
                }
            ],
            "name": "extractIdFromLocation",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "collectionPage"
                },
                {
                    "name": "payload"
                },
                {
                    "name": "options"
                },
                {
                    "name": "xhr"
                }
            ],
            "name": "extractListData",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "collectionPage"
                },
                {
                    "name": "payload"
                },
                {
                    "name": "options"
                },
                {
                    "name": "xhr"
                }
            ],
            "name": "extractListMetaData",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "definedBy": "js.core.Element",
            "name": "find",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "defaultValue": "this",
                    "description": "the scope where the path is evaluated"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "or path"
                }
            ],
            "description": "evaluates a path to retrieve a value",
            "returns": {
                "types": null,
                "description": "the value for the path or undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "get",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "collectionClassName",
                    "optional": false
                }
            ],
            "description": "Returns the configuration for a collectionclass name",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.data.DataSource",
            "name": "getConfigurationForCollectionClassName",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "modelClass"
                }
            ],
            "definedBy": "js.data.DataSource",
            "name": "getConfigurationForModelClass",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Model"
                    ],
                    "name": "contextModel",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "properties",
                    "optional": false
                },
                {
                    "types": [
                        "js.data.DataSource.Context"
                    ],
                    "name": "parentContext",
                    "optional": true
                }
            ],
            "description": "Returns the context for a properties object",
            "returns": {
                "types": [
                    "js.data.DataSource.Context"
                ]
            },
            "definedBy": "js.data.DataSource",
            "name": "getContextByProperties",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "childFactory",
                    "optional": false
                },
                {
                    "types": [
                        "js.data.Entity",
                        "js.data.Collection"
                    ],
                    "name": "requestor",
                    "optional": false
                }
            ],
            "description": "",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.data.DataSource",
            "name": "getContextForChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "action",
                    "optional": true
                }
            ],
            "description": "Returns the format processor",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.data.DataSource",
            "name": "getFormatProcessor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "contentType"
                }
            ],
            "name": "getFormatProcessorForContentType",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "model"
                }
            ],
            "name": "getPathComponentsForModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "modelClass"
                }
            ],
            "name": "getPathComponentsForModelClass",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "resource"
                }
            ],
            "name": "getPathComponentsForResource",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Collection"
                    ],
                    "name": "collection",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "description": "Returns the correct processor for a collection",
            "returns": {
                "types": [
                    "js.data.DataSource.Processor"
                ],
                "description": "processor"
            },
            "definedBy": "js.data.DataSource",
            "name": "getProcessorForCollection",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Model"
                    ],
                    "name": "model",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "description": "Returns the correct processor for model",
            "returns": {
                "types": [
                    "js.data.DataSource.Processor"
                ],
                "description": "processor"
            },
            "definedBy": "js.data.DataSource",
            "name": "getProcessorForModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "modelClass"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "description": "Returns the correct processor for model class",
            "returns": {
                "types": [
                    "js.data.DataSource.Processor"
                ],
                "description": "processor"
            },
            "definedBy": "js.data.DataSource",
            "name": "getProcessorForModelClass",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "name": "getQueryComposer",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "action",
                    "optional": false,
                    "description": "{String} Rest action [GET, PUT, DELETE, POST]"
                },
                {
                    "types": null,
                    "name": "resource",
                    "optional": false,
                    "description": "{js.data.Model|js.data.Collection} model or collection which gets loaded"
                }
            ],
            "description": "global query parameter for each REST action",
            "returns": {
                "types": [
                    "Object"
                ]
            },
            "name": "getQueryParameters",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "fncName"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForFncName",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForKey",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "optional": false
                }
            ],
            "description": "Goes up the tree and searches for a template component with the given name.Returns null if no template was found.",
            "returns": {
                "types": [
                    "js.core.Template"
                ]
            },
            "definedBy": "js.core.Component",
            "name": "getTemplate",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "request"
                },
                {
                    "types": null,
                    "name": "xhr",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false
                }
            ],
            "description": "",
            "name": "handleCreationSuccess",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "request"
                },
                {
                    "types": null,
                    "name": "xhr",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false
                }
            ],
            "description": "",
            "name": "handleSaveError",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "request"
                },
                {
                    "types": null,
                    "name": "xhr",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false
                }
            ],
            "description": "",
            "name": "handleUpdateSuccess",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "optional": false,
                    "description": "to get the value"
                }
            ],
            "description": "determinate if a attribute is available",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if attribute is not undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "has",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "initialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "initializeFormatProcessors",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.data.DataSource",
            "name": "initializeProcessors",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "isDeepEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "value"
                }
            ],
            "definedBy": "js.core.Element",
            "name": "isDefined",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "isEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "collectionPage"
                },
                {
                    "name": "options",
                    "types": [
                        "Object"
                    ],
                    "optional": false
                },
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "optional": false
                }
            ],
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "loadCollectionPage",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "model",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "options",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false,
                    "description": "function(err, model, options)"
                }
            ],
            "description": "",
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "loadModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "description": "logs messages to configured logging functions",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "value",
                    "optional": false
                }
            ],
            "description": "Binding helper to negate a Boolean value",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "definedBy": "js.core.Element",
            "name": "not",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "model"
                },
                {
                    "name": "data"
                },
                {
                    "name": "options"
                }
            ],
            "definedBy": "js.data.DataSource",
            "name": "parseModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.Component",
            "name": "removeAllChildren",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "definedBy": "js.core.Component",
            "name": "removeChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "model",
                    "types": [
                        "js.data.Model"
                    ],
                    "optional": false
                },
                {
                    "name": "options",
                    "types": [
                        "Object"
                    ],
                    "optional": false
                },
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "optional": false
                }
            ],
            "definedBy": "js.data.DataSource",
            "overwritesMethod": true,
            "name": "removeModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Model"
                    ],
                    "name": "model",
                    "optional": false
                },
                {
                    "types": [
                        "JSON"
                    ],
                    "name": "data",
                    "optional": false,
                    "description": "deserialized, parsed data"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false,
                    "description": "function (err, resolvedData)"
                }
            ],
            "description": "resolve references to models and collections",
            "definedBy": "js.data.DataSource",
            "name": "resolveReferences",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Returns the root context of the data source",
            "returns": {
                "types": [
                    "js.data.DataSource.Context"
                ],
                "description": "context"
            },
            "definedBy": "js.data.DataSource",
            "name": "root",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "determinate if the application runs in the browser or on node",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Model"
                    ],
                    "name": "model",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "description": "Saves a model",
            "definedBy": "js.data.DataSource",
            "name": "saveModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "The attribute key"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "value",
                    "optional": false,
                    "description": "The attribute value"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "A hash of options"
                }
            ],
            "description": "Sets new values for attributes and notify about changes",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "this"
            },
            "definedBy": "js.core.Bindable",
            "name": "set",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "value"
                }
            ],
            "definedBy": "js.core.Bindable",
            "name": "setLater",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "description": "Writes attributes back to the source",
            "definedBy": "js.core.Bindable",
            "name": "sync",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "EventDispatcher.Event",
                        "Object"
                    ],
                    "name": "event",
                    "optional": false,
                    "description": "If you use an Object the object is wrapped in an Event"
                },
                {
                    "types": null,
                    "name": "target",
                    "optional": false
                }
            ],
            "description": "Triggers a specific event and the * event",
            "definedBy": "js.core.EventDispatcher",
            "name": "trigger",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                },
                {
                    "name": "scope"
                }
            ],
            "description": "Unbinds callbacks for events",
            "definedBy": "js.core.EventDispatcher",
            "name": "unbind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Object"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "the attribute or attributes to unset"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "description": "Unset attribute on $",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "unset",
            "visibility": "public"
        }
    ],
    "defaults": {
        "endPoint": {
            "name": "endPoint",
            "defaultType": "value",
            "visibility": "public",
            "value": null
        },
        "gateway": {
            "name": "gateway",
            "defaultType": "value",
            "visibility": "public",
            "value": null
        },
        "determinateContextAttribute": {
            "name": "determinateContextAttribute",
            "defaultType": "value",
            "visibility": "public",
            "value": "href"
        },
        "parsePayloadOnCreate": {
            "name": "parsePayloadOnCreate",
            "defaultType": "value",
            "visibility": "public",
            "value": true
        },
        "parsePayloadOnUpdate": {
            "name": "parsePayloadOnUpdate",
            "defaultType": "value",
            "visibility": "public",
            "value": true
        },
        "useSafeHttpMethods": {
            "name": "useSafeHttpMethods",
            "defaultType": "value",
            "visibility": "public",
            "value": false
        },
        "collectionPageSize": {
            "name": "collectionPageSize",
            "defaultType": "value",
            "visibility": "public",
            "value": 100
        },
        "dateFormat": {
            "name": "dateFormat",
            "defaultType": "value",
            "visibility": "public",
            "value": "YYYY-MM-DDTHH:mm:ssZ",
            "definedBy": "js.data.DataSource"
        },
        "creationPolicy": {
            "name": "creationPolicy",
            "defaultType": "value",
            "visibility": "public",
            "value": "auto",
            "description": "Decides if the initialization of the component is started automatically or manually by the application",
            "types": [
                "String"
            ],
            "definedBy": "js.core.Element"
        }
    },
    "properties": {
        "$defaultProcessorFactory": {
            "name": "$defaultProcessorFactory",
            "visibility": "private",
            "propertyType": "complex",
            "value": " RestDataProcessor",
            "definedBy": "js.data.DataSource",
            "overwrites": true
        },
        "$processors": {
            "name": "$processors",
            "visibility": "private",
            "propertyType": "complex",
            "value": " {}",
            "definedBy": "js.data.DataSource"
        },
        "$entityFactory": {
            "name": "$entityFactory",
            "visibility": "private",
            "propertyType": "complex",
            "value": " Entity",
            "definedBy": "js.data.DataSource"
        },
        "$defaultProcessor": {
            "name": "$defaultProcessor",
            "visibility": "private",
            "propertyType": "value",
            "definedBy": "js.data.DataSource"
        },
        "$errorAttribute": {
            "name": "$errorAttribute",
            "visibility": "private",
            "propertyType": "value",
            "definedBy": "js.core.Component"
        },
        "$defaultContentName": {
            "name": "$defaultContentName",
            "visibility": "private",
            "propertyType": "value",
            "description": "if set all children from the descriptor will be placed into ajs.core.Content block with the name of $defaultContentName",
            "definedBy": "js.core.Component"
        },
        "$defaultTemplateName": {
            "name": "$defaultTemplateName",
            "visibility": "private",
            "propertyType": "value",
            "definedBy": "js.core.Component"
        },
        "events": {
            "name": "events",
            "visibility": "public",
            "propertyType": "complex",
            "value": " [\n                ]",
            "description": "",
            "definedBy": "js.core.Component"
        },
        "inject": {
            "name": "inject",
            "visibility": "public",
            "propertyType": "complex",
            "value": " {}",
            "description": "values to be injected",
            "definedBy": "js.core.Bindable"
        }
    },
    "fqClassName": "js.data.RestDataSource",
    "inherit": "js.data.DataSource",
    "dependencies": [
        "JSON",
        "flow",
        "js.data.Collection",
        "js.data.DataSource",
        "js.data.Model",
        "js.lib.query.composer.RestQueryComposer",
        "require",
        "underscore"
    ],
    "type": "js",
    "inheritancePath": [
        "js.data.DataSource",
        "js.core.Component",
        "js.core.Element",
        "js.core.Bindable",
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}