{
    "fqClassName": "js.core.Binding",
    "methods": {
        "ctor": {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                }
            ],
            "definedBy": "js.core.Base",
            "overwritesMethod": true
        },
        "transform": {
            "type": "Method",
            "parameter": [
                {
                    "name": "val"
                }
            ]
        },
        "transformBack": {
            "type": "Method",
            "parameter": [
                {
                    "name": "val"
                }
            ]
        },
        "initialize": {
            "type": "Method",
            "parameter": []
        },
        "_checkAttributes": {
            "type": "Method",
            "parameter": []
        },
        "_createSubBinding": {
            "type": "Method",
            "parameter": []
        },
        "_revCallback": {
            "type": "Method",
            "parameter": [
                {
                    "name": "e"
                }
            ]
        },
        "_changeCallback": {
            "type": "Method",
            "parameter": [
                {
                    "name": "event"
                }
            ]
        },
        "_callback": {
            "type": "Method",
            "parameter": []
        },
        "destroy": {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "overwritesMethod": true
        },
        "_getFncParameters": {
            "type": "Method",
            "parameter": []
        },
        "getValue": {
            "type": "Method",
            "parameter": []
        },
        "getContextValue": {
            "type": "Method",
            "parameter": []
        },
        "trigger": {
            "type": "Method",
            "parameter": [],
            "definedBy": "js.core.EventDispatcher",
            "overwritesMethod": true
        },
        "toString": {
            "type": "Method",
            "parameter": []
        },
        "create": {
            "type": "Method",
            "parameter": [
                {
                    "name": "bindingDef"
                },
                {
                    "name": "target"
                },
                {
                    "name": "callback"
                }
            ]
        },
        "bind": {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "description": "Binds a callback and a scope to a given eventType",
            "definedBy": "js.core.EventDispatcher"
        },
        "unbind": {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                },
                {
                    "name": "scope"
                }
            ],
            "description": "Unbinds callbacks for events",
            "definedBy": "js.core.EventDispatcher"
        },
        "runsInBrowser": {
            "type": "Method",
            "parameter": [],
            "description": "determinate if the application runs in the browser or on node",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base"
        },
        "log": {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "description": "logs messages to configured logging functions",
            "definedBy": "js.core.Base"
        }
    },
    "inherit": "js.core.EventDispatcher",
    "inheritancePath": [
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}