<module:HomeClass
        xmlns:js="js.core"
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:ui="js.ui"
        xmlns:md="md"
        xmlns:view="app.view"
        xmlns:module="app.module"
        xmlns:basic="example.basic"
        xmlns:todo="example.todo">
    <js:Content name="main">
        <div id="home">
            <div class="hero-unit center">
                <h1>&lt;rAppid:js /&gt;</h1>
                <h2 class="sub" style="text-align: center;">the Rich Internet
                    Application Javascript MVC Framework
                </h2>
                <p>- the way you want to do it -</p>
                <p>
                    <a class="btn btn-large btn-primary" href="https://github.com/it-ony/rAppid.js">
                        <em class="icon-download"/>
                        View on GitHub
                    </a>
                </p>
                <ul class="quick-links">
                    <li>
                        <a href="http://rappidjs.com/blog">Read the blog</a>
                    </li>
                    <li>
                        <a href="https://github.com/it-ony/rAppid.js/issues/new" target="_blank">
                            Submit issues
                        </a>
                    </li>
                    <li>
                        <a href="https://trello.com/b/KZIYvyUQ" target="_blank">
                            Roadmap and changelog
                        </a>
                    </li>
                </ul>
            </div>

            <div class="row with-buttons">
                <div class="span4">
                    <h2>Why rAppid.js?</h2>
                    <p>
                        HTML is great for defining views, CSS is great for styling
                        those. But, don't repeat yourself, by writing many tags to
                        define your view. rAppidjs let you encapsulate complexity into
                        components which can be easy used in your application. The
                        result is a clean, readable mark-up offering a quick
                        development and reuse of code.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">View details</a>
                    </p>
                </div>
                <div class="span4">
                    <h2>Another MVC Framework</h2>
                    <p>
                        Well, because other frameworks tries to abstract the
                        MV-pattern by extending the HTML language within the
                        document markup in a dirty. rAppid.js solved that issue by
                        introducing XAML for defining the application, MV-Bindings
                        and event handling.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">XAML</a>
                    </p>
                </div>
                <div class="span4">
                    <h2>Extensibility</h2>
                    <p>
                        rAppid.js is a framework to encapsulate complexity into
                        components which can be used beside HTML. The application is
                        written in a Shadow DOM and rendered valid HTML on the
                        client-side into the Document. It is completly extendable and
                        works well with other libraries.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/ShadowDOM">More about the Shadow DOM</a>
                    </p>

                </div>
            </div>

            <h2>Quick start</h2>

            <div class="row with-buttons">
                <div class="span4">
                    <h3>Installation</h3>
                    <p>
                        rAppid.js is installed using npm with just one command. After the installation succeed the command-line interface is ready to setup projects.
                    </p>
                    <pre>npm install -d -g rAppid.js</pre>
                    <p>Download
                        <a href="http://nodejs.org">node</a> with <a href="http://npmjs.org">npm</a>.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Installation">Installation</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Setup a project</h3>
                    <p>
                        <code>rappidjs</code> is a command-line interface shipped with rAppid.js
                        helping to manage projects.
                    </p>
                    <pre>rappidjs create app &lt;Name&gt;
[&lt;targetDirectory&gt;]</pre>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Project">Project structure</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Run the application</h3>
                    <p>
                        Simply execute the index.html in Firefox or make the public directory available in your web-server.
                    </p>
                    <pre>cd /var/www
sudo ln -s &lt;project dir&gt;/public myApp</pre>
                    <p>
                        Than open <a href="http://localhost/myApp">http://localhost/myApp</a> from a browser.
                    </p>
                </div>
            </div>

            <h2>The basics</h2>
            <div class="row with-buttons">
                <div class="span4">
                    <h3>Start</h3>
                    <p>
                        The <code>index.html</code> is the start file of a rAppid.js application.
                        The application gets:
                    </p>
                        <ol>
                            <li><code>bootStrap</code>ped</li>
                            <li><code>start</code>ed and after completing this</li>
                            <li><code>render</code>ed into the body.</li>
                        </ol>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">View details</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Application Markup</h3>
                    <p>
                        The application structure is defined with XAML in the <code>App.xml</code> file.
                        Within the XML file HTML can be combined with rAppid.js components.
                        Each application inherits form <code>js.core.Application</code> or from a Code-Behind file like in this case from
                        <code>AppClass.js</code>.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">XAML</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Application Code-Behind</h3>
                    <p>
                        rAppid.js is a framework encapsulating complexity into
                        components which can be used with HTML. The application markup
                        gets translated into a Shadow DOM which is rendered as valid HTML on the
                        client-side into the Document. It is completly extendable and
                        works well with other libraries.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">More about the Shadow DOM</a>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="span8">
                    <div class="tabtable">
                        <ui:TabView>
                            <view:Code data-title="index.html">${example.basic.Index}
                                <view:Explanation title="requirejs library" search="js/lib/require.js">
                                    Loads requirejs, which is used for loading
                                    dependencies.
                                </view:Explanation>
                            </view:Code>
                            <view:Code data-title="App.xml">${example.basic.App}</view:Code>
                            <view:Code data-title="AppClass.js">${example.basic.AppClass}</view:Code>
                        </ui:TabView>
                    </div>
                </div>
                <div class="span4">
                    <div class="well app">
                        <basic:App/>
                    </div>
                </div>
            </div>
            <h2>Add some business logic</h2>
            <div class="row with-buttons">
                <div class="span4">
                    <h3>Data-Binding</h3>
                    <p>
                        In rAppid.js data can be bound to components and html.
                        There are different types of bindings
                    </p>
                    <ul>
                        <li>Model-View-Binding</li>
                        <li>Two-Way-Binding</li>
                        <li>Model-View-Binding</li>
                    </ul>
                    <p>It is possible to chain bindings and also bind functions.</p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Bindings">Bindings</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Business logic</h3>
                    <p>

                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Bindable">Model</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Event handler</h3>
                    <p>

                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Events">Events</a>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="span8">
                    <div class="tabtable">
                        <ui:TabView>
                            <view:Code data-title="App.xml">${example.todo.App}</view:Code>
                            <view:Code data-title="AppClass.js">${example.todo.AppClass}</view:Code>
                            <view:Code data-title="model/Todo.js">${example.todo.TodoModel}</view:Code>
                            <view:Code data-title="model/TodoList.js">${example.todo.TodoList}</view:Code>
                        </ui:TabView>
                    </div>
                </div>
                <div class="span4">
                    <div class="well app">
                        <todo:App/>
                    </div>
                </div>
            </div>
        </div>

    </js:Content>
</module:HomeClass>