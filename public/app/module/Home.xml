<module:HomeClass
        xmlns:js="js.core"
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:ui="js.ui"
        xmlns:md="md"
        xmlns:view="app.view"
        xmlns:module="app.module"
        xmlns:basic="example.basic"
        xmlns:todo="example.todo" xmlns:contact="example.contact" xmlns:google="google" xmlns:twitter="twitter">


    <js:Head title="rAppid.js - the Rich Internet Application Javascript MVC Framework" author="Tony Findeisen &amp; Marcus Krejpowicz" />

    <js:Content name="main">
        <div id="home">
            <div class="hero-unit center">
                <h1>&lt;rAppid:js /&gt;</h1>
                <h2 class="sub" style="text-align: center;">the Rich Internet
                    Application Javascript MVC Framework
                </h2>
                <p>- the way you want to do it -</p>
                <p>
                    <a class="btn btn-large btn-primary" href="https://github.com/it-ony/rAppid.js">
                        <em class="icon-download"/>
                        View on GitHub
                    </a>
                </p>
                <ul class="quick-links">
                    <li>
                        <a href="mailto:support@rappidjs.com" target="external">Contact us</a>
                    </li>
                    <li>
                        <a href="http://blog.rappidjs.com">Read the blog</a>
                    </li>
                    <li>
                        <a href="https://github.com/it-ony/rAppid.js/issues/new" target="_blank">
                            Submit issues
                        </a>
                    </li>
                    <li>
                        <a href="https://trello.com/b/KZIYvyUQ" target="_blank">
                            Roadmap and changelog
                        </a>
                    </li>
                </ul>
                <ul class="follow">
                    <li>
                        <google:PlusOne size="small" href="http://www.rappidjs.com/#!/" />
                    </li>
                    <li>
                        <twitter:Follow user="rappidjs" />
                    </li>
                    <li>
                        <twitter:Share via="rappidjs" url="http://www.rappidjs.com/#!/"/>
                    </li>
                </ul>
            </div>

            <div class="row with-buttons">
                <div class="span4">
                    <h2>Why rAppid.js?</h2>
                    <p>
                        HTML is great for defining views and CSS is great for styling. But don't repeat yourself by writing many tags to
                        define your view. rAppidjs let you encapsulate complexity into
                        components which can be easy used like HTML elements in your application. The
                        result is a clean, readable mark-up offering a quick
                        development and high reuse of code.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Home">View details</a>
                    </p>
                </div>
                <div class="span4">
                    <h2>Another MVC Framework</h2>
                    <p>
                        Most frameworks use templates to describe their views or try to extend the HTML language within the
                        document markup, which is a dirty style. rAppid.js solves that issue by
                        introducing an eXtendable Application Markup Language (XAML) for defining the application, MV-Bindings
                        and event handling.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/XAML">XAML</a>
                    </p>
                </div>
                <div class="span4">
                    <h2>Extensibility</h2>
                    <p>
                        rAppid.js allows you to encapsulate complexity into
                        components which can be used beside HTML. Therefor rAppid.js uses a Shadow DOM, which is rendered as valid HTML in the document body or a specific target.
                        It is completely extendable and
                        works well with other libraries.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/ShadowDOM">More about the Shadow DOM</a>
                    </p>

                </div>
            </div>

            <h2>Quick start</h2>

            <div class="row with-buttons">
                <div class="span4">
                    <h3>Installation</h3>
                    <p>
                        rAppid.js is installed using npm with just one command. After the installation succeed the command-line interface is ready to setup projects.
                    </p>
                    <pre>npm install -d -g rAppid.js</pre>
                    <p>Download
                        <a href="http://nodejs.org">node</a> with <a href="http://npmjs.org">npm</a>.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Installation">Installation</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Setup a project</h3>
                    <p>
                        <code>rappidjs</code> is a command-line interface shipped with rAppid.js
                        helping to manage projects.
                    </p>
                    <pre>rappidjs create app &lt;Name&gt;
[&lt;targetDirectory&gt;]</pre>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Project">Project structure</a>
                        <a class="btn btn-info" href="/wiki/Command-Line-Interface">Commmand-line</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Run the application</h3>
                    <p>
                        Simply execute the index.html or make the public directory available in your web-server.
                    </p>
                    <pre>cd /var/www
sudo ln -s &lt;project dir&gt;/public myApp</pre>
                    <p>
                        Than open <a href="http://localhost/myApp">http://localhost/myApp</a> from a browser.
                    </p>
                </div>
            </div>

            <h2>The basics</h2>
            <div class="row with-buttons">
                <div class="span4">
                    <h3>Start</h3>
                    <p>
                        The <code>index.html</code> is the start file of a rAppid.js application.
                        The application gets:
                    </p>
                        <ol>
                            <li><code>bootStrap</code>ped</li>
                            <li><code>start</code>ed and after completing this</li>
                            <li><code>render</code>ed into the body.</li>
                        </ol>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">View details</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Application Markup</h3>
                    <p>
                        The application structure is defined with XAML in the <code>App.xml</code> file.
                        Within the XML file HTML can be combined with rAppid.js components.
                        Each application inherits form <code>js.core.Application</code> or from a Code-Behind file like in this case from
                        <code>AppClass.js</code>.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">XAML</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Application Code-Behind</h3>
                    <p>
                        rAppid.js is a framework encapsulating complexity into
                        components which can be used with HTML. The application markup
                        gets translated into a Shadow DOM which is rendered as valid HTML on the
                        client-side into the Document. It is completly extendable and
                        works well with other libraries.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="#">More about the Shadow DOM</a>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="span8">
                    <div class="tabtable">
                        <ui:TabView>
                            <ui:Tab title="index.html">
                                <view:Code >${example.basic.Index}
                                    <view:Explanation title="requirejs library" search="js/lib/require.js">
                                        Loads requirejs, which is used for loading
                                        dependencies.
                                    </view:Explanation>
                                </view:Code>
                            </ui:Tab>
                            <ui:Tab title="App.xml">
                                <view:Code >${example.basic.App}</view:Code>
                            </ui:Tab>
                            <ui:Tab title="AppClass.js">
                                <view:Code>${example.basic.AppClass}</view:Code>
                            </ui:Tab>
                        </ui:TabView>
                    </div>
                </div>
                <div class="span4">
                    <div class="well app">
                        <basic:App/>
                    </div>
                </div>
            </div>
            <h2>Add some business logic</h2>
            <div class="row with-buttons">
                <div class="span4">
                    <h3>Data-Binding</h3>
                    <p>
                        In rAppid.js data can be bound to components and html.
                        There are different types of bindings
                    </p>
                    <ul>
                        <li>Model-View-Binding</li>
                        <li>Two-Way-Binding</li>
                        <li>Model-View-Binding</li>
                    </ul>
                    <p>It's possible to chain bindings and bind functions.</p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Bindings">Bindings</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Business logic</h3>
                    <p>
                        The complex business logic of an application is split and encapsulated into small pieces of easy to understandable code - the
                        <code>Entity</code>.
                    </p>
                    <p>
                        Entities are storing data which could be bound to components. Entities, that can be loaded and persistent are called
                        <code>Model</code>s.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Bindable">Bindable</a>
                        <a class="btn btn-info" href="/wiki/Bindable">Entity</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Event handler</h3>
                    <p>
                        In XAML an event handler is registered declarative with an on<code>eventname</code> attribute.
                        In Javascript the handler is bound by calling a bind function on the target passing the eventname and the handler as arguments.
                    </p>
                    <p>
                        rAppid.js also supports late binding and events on chained paths.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Events">Events</a>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="span8">
                    <div class="tabtable">
                        <ui:TabView>
                            <ui:Tab title="App.xml">
                                <view:Code title="App.xml">${example.todo.App}</view:Code>
                            </ui:Tab>
                            <ui:Tab title="AppClass.js">
                                <view:Code>${example.todo.AppClass}</view:Code>
                            </ui:Tab>
                            <ui:Tab title="model/Todo.js">
                                <view:Code >${example.todo.TodoModel}</view:Code>
                            </ui:Tab>
                            <ui:Tab title="model/TodoList.js">
                                <view:Code >${example.todo.TodoList}</view:Code>
                            </ui:Tab>
                        </ui:TabView>
                    </div>
                </div>
                <div class="span4">
                    <div class="well app">
                        <todo:App/>
                    </div>
                </div>
            </div>


            <h2>Components</h2>
            <div class="row">
                <div class="span4">
                    <h3>Create</h3>
                    <p>
                        A component is a class defined in a package which inherits from <code>js.core.Component</code>. It can be declared either in Javascript or with XAML.
                    </p>
                    <p>
                        Components can be either visible at runtime and interact with the user or invisible providing services like <code>I18n</code> or <code>RestDataSource</code>.
                    </p>
                </div>
                <div class="span4">
                    <h3>Use</h3>
                    <p>
                        Components can be created either declarative using XAML or at runtime with Javascript.
                    </p>
                    <p>
                        In XAML simply write <code>&lt;prefix:Component /&gt;</code> to create and add a new instance of the component.</p>
                    <p>
                        At runtime use the <code>createComponent</code>
                        command to instantiate the component and add it with the <code>addChild</code> method.
                    </p>

                </div>
                <div class="span4">
                    <h3>Publish</h3>
                    <p>
                        Components can be easily published as rAppid.js module using <code>
                        <a href="http://npmjs.org/doc/publish.html">npm publish</a></code> command.
                    </p>
                    <p>
                        Creating a <a href="wiki/Project">library project</a>, add the components into a unique package structure and provide the required information in the
                        <code>package.json</code> file.
                    </p>
                </div>
            </div>

            <div class="row">
                <div class="span8">
                    <div class="tabtable">
                        <ui:TabView>
                            <ui:Tab title="view/Card.xml">
                                <view:Code >${example.contact.Card}</view:Code>
                            </ui:Tab>
                            <ui:Tab title="App.xml">
                                <view:Code >${example.contact.App}</view:Code>
                            </ui:Tab>
                            <ui:Tab title="AppClass.js">
                                <view:Code >${example.contact.AppClass}</view:Code>
                            </ui:Tab>
                            <ui:Tab title="model/Person.js">
                                <view:Code >${example.contact.PersonModel}</view:Code>
                            </ui:Tab>
                        </ui:TabView>
                    </div>
                </div>
                <div class="span4">
                    <div class="well app contact-app">
                        <contact:App/>
                    </div>
                </div>
            </div>

            <h2>Data</h2>
            <div class="row with-buttons">
                <div class="span4">
                    <h3>DataSource</h3>
                    <p>
                        Data sources are designed asynchronous to access every source in the same way.
                        Data is loaded, updated and deleted with the Active-Record-Pattern via methods of the model.
                    </p>
                    <p>
                        rAppid.js support Single-Instance-Pattern, schemas, format processors and provides an interface to define how to handle sub-models.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Datasource">Data source</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>REST</h3>
                    <p>
                        The RestDataSource is a common implementation to access RESTful web-services. Configure the target API, define
                        your models paths and start accessing remote data.
                    </p>
                    <p>
                        Define processors for special serializing and deserializing of the model data or choose between JSON and XML as exchange format.
                    </p>
                </div>
                <div class="span4">
                    <h3>LocalStorage</h3>
                    <p>
                        Modern web applications are storing local data on the client-side - without sending them with each request to the server.
                    </p>
                    <p>
                        The LocalStorage-DataSource makes it easy to persistent models, even with a complex schema.
                    </p>
                </div>
            </div>

            <h2>Fragmental navigation</h2>
            <div class="row with-buttons">
                <div class="span4">
                    <h3>History</h3>
                    <p>
                        Navigate back and forth, do internal redirects and process deeplinks from outside - that's what the history do.
                    </p>
                    <p>
                        The history listen to hash-change-events from the browser and does a fallback polling mechanism for older browsers.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/History">History</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Router</h3>
                    <p>
                        The router processes changes from the history using routes and executes handler functions, which also can be asynchronous or interrupted.
                    </p>
                    <p>
                        The idea is to pass a callback from the application start to all
                        routes and redirects to get notified when the application is
                        completely started.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Router">Router</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>ModuleLoader</h3>

                    <p>
                        With the ModuleLoader - modules can loaded dynamically when the are needed to reduce the size and loading time of a complex application.
                    </p>
                    <p>
                        The ModuleLoader interacts with the <code>Router</code> and also executes routes defined in a loaded module after it has been started. This is modularization!
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/ModuleLoader">ModuleLoader</a>
                    </p>
                </div>
            </div>


            <!--
            TODO

            * Injection
            * I18n

            * Node Rendering
            * SVG

            -->

            <h2>About this site</h2>
            <div class="row with-buttons">
                <div class="span4">
                    <h3>Developed with rAppid.js</h3>
                    <p>
                        This project site has been developed completely with rAppid.js to show how powerful it is.
                    </p>
                    <p>
                        The site uses the<code>raw</code>-Plugin to require the source code
                        of our examples which is shown highlighted in a <code>CodeView</code> component.
                    </p>
                    <p>
                        It dynamically loads markdown files from our wiki which is parsed and renderer on the client.
                    </p>
                </div>
                <div class="span4">
                    <h3>Search Engine Optimizing</h3>
                    <p>
                        View the
                        <a href="view-source:http://rappid.www/#/home" target="_blank">source code</a>
                        of this page (<code>Ctrl + u</code>) and you'll see what a crawler sees. Almost nothing!
                    </p>
                    <p>
                        Because this is an ajax page, we use hash-bang urls to tell the crawler the ajax parts of the site.
                        The crawler transforms these urls to special requests, which are handled by our
                        <a href="https://github.com/it-ony/rAppid.js-server">rAppid.js-server</a>.
                    </p>
                    <p>
                        See this page <a href="http://www.rappidjs.com/?_escaped_fragment_=/home">rendered</a> on node with rAppid.js.
                    </p>
                    <p class="buttons">
                        <a class="btn btn-info" href="/wiki/Node-Rendering">Node Rendering</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>License</h3>
                    <p>
                        This site has been developed by Tony Findeisen and Marcus Krejpowicz using rAppid.js.
                        The source code of this website is licensed under the MIT License and available at
                        <a href="https://github.com/it-ony/rappidjs.com">Github</a>.
                    </p>
                    <p>
                        Inspired by <a href="http://angularjs.org">angularjs</a>. Styled with
                        <a href="http://twitter.github.com/bootstrap/">bootstrap</a>.
                    </p>
                </div>
            </div>
        </div>

    </js:Content>
</module:HomeClass>