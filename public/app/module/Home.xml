<js:Module xmlns:js="js.core" xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="js.ui" xmlns:md="md" xmlns:view="app.view">
    <js:Content name="main">
        <div id="home">
            <div class="hero-unit center">
                <h1>&lt;rAppid:js /&gt;</h1>
                <h2 class="sub" style="text-align: center;">the Rich Internet
                    Application Javascript MVC Framework
                </h2>
                <p>- the way you want to do it -</p>
                <p>
                    <a class="btn btn-large btn-primary" href="https://github.com/it-ony/rAppid.js">
                        <em class="icon-download"/>
                        View on GitHub
                    </a>
                </p>
                <ul class="quick-links">
                    <li>
                        <a href="http://docs.rappidjs.com" target="_blank">
                            Documentation
                        </a>
                    </li>
                    <li>
                        <a href="http://rappidjs.com/blog">Read the blog</a>
                    </li>
                    <li>
                        <a href="https://github.com/it-ony/rAppid.js/issues/new" target="_blank">
                            Submit issues
                        </a>
                    </li>
                    <li>
                        <a href="https://trello.com/b/KZIYvyUQ" target="_blank">
                            Roadmap and changelog
                        </a>
                    </li>
                </ul>
            </div>

            <div class="row">
                <div class="span4">
                    <h2>Why rAppid.js?</h2>
                    <p>
                        HTML is great for defining views, CSS is great for styling
                        those. But, don't repeat yourself, by writing many tags to
                        define your view. rAppidjs let you encapsulate complexity into
                        components which can be easy used in your application. The
                        result is a clean, readable mark-up offering a quick
                        development and reuse of code.
                    </p>
                    <p class="buttons">
                        <a class="btn" href="#">View details</a>
                    </p>
                </div>
                <div class="span4">
                    <h2>Another MVC Framework</h2>
                    <p>
                        Well, because other frameworks tries to abstract the
                        MV-pattern by extending the HTML language within the
                        document markup in a dirty. rAppid.js solved that issue by
                        introducing XAML for defining the application, MV-Bindings
                        and event handling.
                    </p>
                    <p class="buttons">
                        <a class="btn" href="#">XAML</a>
                    </p>
                </div>
                <div class="span4">
                    <h2>Extensibility</h2>
                    <p>
                        rAppid.js is a framework to encapsulate complexity into
                        components which can be used beside HTML. The application is
                        written in a Shadow DOM and rendered valid HTML on the
                        client-side into the Document. It is completly extendable and
                        works well with other libraries.
                    </p>
                    <p class="buttons">
                        <a class="btn" href="/wiki/ShadowDOM">More about the Shadow DOM</a>
                    </p>

                </div>
            </div>

            <h2>Quick start</h2>

            <div class="row">
                <div class="span4">
                    <h3>Installation</h3>
                    <p>
                        rAppid.js is installed using npm with just one command. After the installation succeed the command-line interface is ready to setup projects.
                    </p>
                    <pre>npm install -d -g rAppid.js</pre>
                    <p>Download
                        <a href="http://nodejs.org">node</a> with <a href="http://npmjs.org">npm</a>.
                    </p>
                    <p class="buttons">
                        <a class="btn" href="/wiki/Installation">Installation</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Setup a project</h3>
                    <p>
                        <code>rappidjs</code> is a command-line interface shipped with rAppid.js
                        helping to manage projects.
                    </p>
                    <pre>rappidjs create app &lt;Name&gt;
[&lt;targetDirectory&gt;]</pre>
                    <p class="buttons">
                        <a class="btn" href="/wiki/Project">Project structure</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Run the application</h3>
                    <p>
                        Simply execute the index.html in Firefox or make the public directory available in your web-server.
                    </p>
                    <pre>cd /var/www
sudo ln -s &lt;project dir&gt;/public myApp</pre>
                    <p>
                        Than open <a href="http://localhost/myApp">http://localhost/myApp</a> from a browser.
                    </p>
                </div>
            </div>

            <h2>The basics</h2>

            <div class="row">
                <div class="span4">
                    <h3>Start file</h3>
                    <p>
                        Bootstrap -&gt; Start -&gt; Render
                    </p>
                    <p>
                        The <code>index.html</code>
                    </p>
                    <p class="buttons">
                        <a class="btn" href="#">View details</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Application Markup</h3>
                    <p>
                        Inherits from AppClass.js, defines the shadow dom
                    </p>
                    <p class="buttons">
                        <a class="btn" href="#">XAML</a>
                        <a class="btn" href="#">Bindings</a>
                    </p>
                </div>
                <div class="span4">
                    <h3>Application Code-Behind</h3>
                    <p>
                        rAppid.js is a framework to encapsulate complexity into
                        components which can be used beside HTML. The application is
                        written in a Shadow DOM and rendered valid HTML on the
                        client-side into the Document. It is completly extendable and
                        works well with other libraries.
                    </p>
                    <p class="buttons">
                        <a class="btn" href="#">More about the Shadow DOM</a>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="span8">
                    <div class="tabtable">
                        <ui:TabView>
                            <div title="index.html">
                                <view:CodeView>
                                    <![CDATA[
                                        <!DOCTYPE HTML>
                                        <html>
                                        <head>
                                            <title>MyApp</title>
                                            <script type="text/javascript" src="js/lib/require.js"></script>
                                            <script type="text/javascript" src="js/lib/rAppid.js"></script>
                                        </head>
                                        <body>
                                        <script type="text/javascript" data-usage="bootStrap">
                                            rAppid.bootStrap("app/AddressBook.xml", "config.json",
                                                function (err, systemManager, application) {
                                                    if (!err) {
                                                        application.start(null, function () {
                                                            application.render(document.body);
                                                        });
                                                    }
                                                });
                                        </script>
                                        </body>
                                        </html>
                                    ]]>
                                </view:CodeView>
                            </div>
                            <div title="App.xml">
                                <view:CodeView>
                                    <![CDATA[
                                    <?xml version="1.0"?>
                                    <app:AddressBookClass xmlns="http://www.w3.org/1999/xhtml"
                                                          xmlns:js="js.core" xmlns:ui="js.ui" xmlns:app="app" xmlns:view="app.view">
                                        <h1>Address Book</h1>
                                        <h2>New Contact</h2>
                                        <fieldset>
                                            <label>Firstname</label>
                                            <input type="text" value="{{person.firstname}}"/>
                                            <label>Lastname</label>
                                            <input type="text" value="{{person.lastname}}"/>
                                            <label>Phone </label>
                                            <input type="text" value="{{person.phone}}"/>

                                            <button onclick="addPerson">Add</button>
                                        </fieldset>
                                        <h2>Contacts</h2>

                                        <ui:ItemsView items="{contacts}" itemKey="person" tagName="ul" id="contacts">
                                            <js:Template name="item">
                                                <view:Card tagName="li" person="{$person}" class="yeah"/>
                                            </js:Template>
                                        </ui:ItemsView>


                                    </app:AddressBookClass>
                                    ]]>
                                </view:CodeView>
                            </div>
                            <div title="AppClass.js">
                                <view:CodeView>
                                    <![CDATA[
                                    define(
                                        ["js/core/Application", "app/model/Person", "js/core/List"],
                                        function (Application, Person, List) {

                                            return Application.inherit({
                                                /**
                                                 *  initializes the application variables
                                                 */
                                                initialize:function () {
                                                    this.set('contacts', new List());
                                                    this.set('person',new Person());
                                                },

                                                addPerson: function(){
                                                    this.$.contacts.add(this.$.person);
                                                    this.set('person', new Person());
                                                },

                                                /***
                                                 * Starts the application
                                                 * @param parameter
                                                 * @param callback
                                                 */
                                                start:function (parameter, callback) {
                                                    // false - disables autostart
                                                    this.callBase(parameter, false);

                                                    callback();
                                                }
                                            });
                                        }
                                    );
                                    ]]>
                                </view:CodeView>
                            </div>
                        </ui:TabView>
                    </div>
                </div>
            </div>
        </div>

        <md:View>
            # Markdown View
            This text is formatted with **Markdown**.
        </md:View>


    </js:Content>
</js:Module>